
<%- `// auto-generated ${new Date().toISOString()}\n/* eslint-disable */` %>
import type { VovkClientFetcher } from 'vovk';
import type fetcher from '<%= t.imports.fetcher %>';
import type createRPC from '<%= t.imports.createRPC %>';
<% t.segments.forEach((segment, i) => { if(Object.keys(t.fullSchema[segment.segmentName].controllers).length) { %>
import type { Controllers as Controllers<%= i %> } from "<%= segment.segmentImportPath %>";
<% }}) %>
type Options = typeof fetcher extends VovkClientFetcher<infer U> ? U : never;
<% t.segments.forEach((segment, i) => {
  Object.keys(t.fullSchema[segment.segmentName].controllers).forEach((key) => { %>
export const <%= key %>: ReturnType<typeof createRPC<Controllers<%= i %>["<%= key %>"], Options>>;
  <% }) 
}) %>
