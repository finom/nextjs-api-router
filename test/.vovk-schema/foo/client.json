{
  "emitSchema": true,
  "segmentName": "foo/client",
  "controllers": {
    "ClientControllerRPC": {
      "controllerName": "ClientControllerRPC",
      "originalControllerName": "ClientController",
      "prefix": "client",
      "handlers": {
        "getHelloWorldResponseObject": {
          "httpMethod": "GET",
          "path": "get-hello-world-response-object"
        },
        "getHelloWorldObjectLiteral": {
          "httpMethod": "GET",
          "path": "get-hello-world-object-literal"
        },
        "getHelloWorldNextResponseObjectPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-next-response-object-promise"
        },
        "getHelloWorldRawResponseObjectPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-raw-response-object-promise"
        },
        "getHelloWorldObjectLiteralPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-object-literal-promise"
        },
        "getHelloWorldHeaders": {
          "httpMethod": "GET",
          "path": "get-hello-world-headers"
        },
        "getHelloWorldArray": {
          "httpMethod": "GET",
          "path": "get-hello-world-array"
        },
        "getHelloWorldAndEmptyGeneric": {
          "httpMethod": "GET",
          "path": "get-hello-world-and-empty-generic"
        },
        "getWithParams": {
          "path": "with-params/:hello",
          "httpMethod": "GET"
        },
        "postWithAll": {
          "path": "with-all/:hello",
          "httpMethod": "POST"
        },
        "postWithBodyAndQueryUsingReqVovk": {
          "path": "with-all-using-req-vovk",
          "httpMethod": "POST"
        },
        "getNestedQuery": {
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "postWithFormDataUsingReqVovk": {
          "path": "form-data",
          "httpMethod": "POST"
        },
        "getErrorResponse": {
          "path": "error",
          "httpMethod": "GET"
        }
      }
    },
    "StreamingControllerRPC": {
      "controllerName": "StreamingControllerRPC",
      "originalControllerName": "StreamingController",
      "prefix": "streaming",
      "handlers": {
        "postWithStreaming": {
          "httpMethod": "POST",
          "path": "post-with-streaming"
        },
        "postWithStreamingAndImmediateError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-immediate-error"
        },
        "postWithStreamingAndDelayedError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-error"
        },
        "postWithStreamingAndDelayedCustomError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-custom-error"
        },
        "postWithStreamingAndDelayedUnhandledError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-unhandled-error"
        }
      }
    },
    "StreamingGeneratorControllerRPC": {
      "controllerName": "StreamingGeneratorControllerRPC",
      "originalControllerName": "StreamingGeneratorController",
      "prefix": "streaming-generator",
      "handlers": {
        "getWithStreaming": {
          "httpMethod": "GET",
          "path": "get-with-streaming"
        },
        "postWithAsyncStreaming": {
          "httpMethod": "POST",
          "path": "post-with-async-streaming"
        },
        "postWithStreaming": {
          "httpMethod": "POST",
          "path": "post-with-streaming"
        },
        "postWithStreamingAndImmediateError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-immediate-error"
        },
        "postWithStreamingAndDelayedError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-error"
        },
        "postWithStreamingAndDelayedCustomError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-custom-error"
        },
        "postWithStreamingAndDelayedUnhandledError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-unhandled-error"
        }
      }
    },
    "CostomSchemaControllerRPC": {
      "controllerName": "CostomSchemaControllerRPC",
      "originalControllerName": "CostomSchemaController",
      "prefix": "",
      "handlers": {
        "getWithCustomSchema": {
          "custom": {
            "hello": "world"
          },
          "httpMethod": "GET",
          "path": "get-with-custom-schema"
        }
      }
    },
    "WithZodClientControllerRPC": {
      "controllerName": "WithZodClientControllerRPC",
      "originalControllerName": "WithZodClientController",
      "prefix": "with-zod",
      "handlers": {
        "postWithBodyQueryAndParams": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string",
                  "const": "body"
                }
              },
              "required": [
                "hello"
              ],
              "additionalProperties": false,
              "description": "This is a body",
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "query": {
              "type": "object",
              "properties": {
                "hey": {
                  "type": "string",
                  "const": "query"
                }
              },
              "required": [
                "hey"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "output": null,
            "params": null
          },
          "path": ":foo",
          "httpMethod": "POST"
        },
        "putWithBodyAndNullQuery": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string",
                  "const": "body"
                }
              },
              "required": [
                "hello"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "query": null,
            "output": null,
            "params": null
          },
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "validation": {
            "body": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string",
                  "const": "body"
                }
              },
              "required": [
                "hello"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "query": null,
            "output": null,
            "params": null
          },
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "validation": {
            "body": null,
            "query": {
              "type": "object",
              "properties": {
                "hey": {
                  "type": "string",
                  "const": "query"
                }
              },
              "required": [
                "hey"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "output": null,
            "params": null
          },
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "getNestedQuery": {
          "validation": {
            "body": null,
            "query": {
              "type": "object",
              "properties": {
                "x": {
                  "type": "string"
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "z": {
                  "type": "object",
                  "properties": {
                    "f": {
                      "type": "string"
                    },
                    "u": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "d": {
                      "type": "object",
                      "properties": {
                        "x": {
                          "type": "string"
                        },
                        "arrOfObjects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "foo": {
                                "type": "string"
                              },
                              "nestedArr": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "nestedObj": {
                                "type": "object",
                                "properties": {
                                  "deepKey": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "deepKey"
                                ],
                                "additionalProperties": false
                              }
                            },
                            "required": [
                              "foo"
                            ],
                            "additionalProperties": false
                          }
                        }
                      },
                      "required": [
                        "x",
                        "arrOfObjects"
                      ],
                      "additionalProperties": false
                    }
                  },
                  "required": [
                    "f",
                    "u",
                    "d"
                  ],
                  "additionalProperties": false
                }
              },
              "required": [
                "x",
                "y",
                "z"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "output": null,
            "params": null
          },
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "validation": {
            "body": null,
            "query": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": [
                "hello"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "output": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": [
                "hello"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "params": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "openapi": {
            "summary": "This is a summary",
            "x-codeSamples": [
              {
                "label": "vovk-client",
                "lang": "typescript",
                "source": "import { MyRPC } from 'vovk-client';\n\nconst response = await MyRPC.outputWithOpenApi();\n    \n  "
              }
            ]
          },
          "path": "output-and-openapi/:id",
          "httpMethod": "GET"
        }
      }
    },
    "WithYupClientControllerRPC": {
      "controllerName": "WithYupClientControllerRPC",
      "originalControllerName": "WithYupClientController",
      "prefix": "with-yup",
      "handlers": {
        "postWithBodyAndQuery": {
          "validation": {
            "body": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string",
                  "enum": [
                    "body"
                  ]
                }
              },
              "required": [
                "hello"
              ]
            },
            "query": {
              "type": "object",
              "default": {},
              "properties": {
                "hey": {
                  "type": "string",
                  "enum": [
                    "query"
                  ]
                }
              },
              "required": [
                "hey"
              ]
            }
          },
          "httpMethod": "POST",
          "path": "post-with-body-and-query"
        },
        "putWithBodyAndNullQuery": {
          "validation": {
            "body": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string",
                  "enum": [
                    "body"
                  ]
                }
              },
              "required": [
                "hello"
              ]
            }
          },
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "validation": {
            "body": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string",
                  "enum": [
                    "body"
                  ]
                }
              },
              "required": [
                "hello"
              ]
            }
          },
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "validation": {
            "query": {
              "type": "object",
              "default": {},
              "properties": {
                "hey": {
                  "type": "string",
                  "enum": [
                    "query"
                  ]
                }
              },
              "required": [
                "hey"
              ]
            }
          },
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "getNestedQuery": {
          "validation": {
            "query": {
              "type": "object",
              "default": {
                "z": {
                  "d": {}
                }
              },
              "properties": {
                "x": {
                  "type": "string"
                },
                "y": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "z": {
                  "type": "object",
                  "default": {
                    "d": {}
                  },
                  "properties": {
                    "f": {
                      "type": "string"
                    },
                    "u": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "d": {
                      "type": "object",
                      "default": {},
                      "properties": {
                        "x": {
                          "type": "string"
                        },
                        "arrOfObjects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "default": {
                              "nestedObj": {}
                            },
                            "properties": {
                              "foo": {
                                "type": "string"
                              },
                              "nestedArr": {
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": "string"
                                }
                              },
                              "nestedObj": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "default": {},
                                "properties": {
                                  "deepKey": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "required": [
                              "foo"
                            ]
                          }
                        }
                      },
                      "required": [
                        "x",
                        "arrOfObjects"
                      ]
                    }
                  },
                  "required": [
                    "f",
                    "u",
                    "d"
                  ]
                }
              },
              "required": [
                "x",
                "y",
                "z"
              ]
            }
          },
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "validation": {
            "body": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": [
                "hello"
              ]
            },
            "query": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": [
                "hello"
              ]
            }
          },
          "path": "output-and-openapi",
          "httpMethod": "GET",
          "openapi": {
            "summary": "This is a summary",
            "parameters": [
              {
                "name": "hello",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "x-codeSamples": [
              {
                "label": "vovk-client",
                "lang": "typescript",
                "source": "import { MyRPC } from 'vovk-client';\n\nconst response = await MyRPC.outputWithOpenApi({\n    body: {},\n    query: {},\n});\n    \n  "
              }
            ],
            "requestBody": {
              "description": "Request body",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "default": {},
                    "properties": {
                      "hello": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "hello"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "WithDtoClientControllerRPC": {
      "controllerName": "WithDtoClientControllerRPC",
      "originalControllerName": "WithDtoClientController",
      "prefix": "with-dto",
      "handlers": {
        "postWithBodyQueryAndParams": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "query": {
              "properties": {
                "hey": {
                  "pattern": "query",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hey"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "path": "with-params/:param",
          "httpMethod": "POST"
        },
        "postWithBodyAndQueryTransformed": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "query": {
              "properties": {
                "hey": {
                  "pattern": "query",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hey"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "httpMethod": "POST",
          "path": "post-with-body-and-query-transformed"
        },
        "putWithBodyAndNullQuery": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "query": null,
            "output": null,
            "params": null
          },
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "query": null,
            "output": null,
            "params": null
          },
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "validation": {
            "body": null,
            "query": {
              "properties": {
                "hey": {
                  "pattern": "query",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hey"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "postWithBodyAndQueryWithReqVovk": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "query": {
              "properties": {
                "hey": {
                  "pattern": "query",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hey"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "httpMethod": "POST",
          "path": "post-with-body-and-query-with-req-vovk"
        },
        "getWithQueryArrayAndNullBody": {
          "validation": {
            "body": null,
            "query": {
              "properties": {
                "hey": {
                  "pattern": "query",
                  "type": "string"
                },
                "array1": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "minItems": 1
                },
                "array2": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "minItems": 2
                }
              },
              "type": "object",
              "required": [
                "hey",
                "array1",
                "array2"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "httpMethod": "GET",
          "path": "get-with-query-array-and-null-body"
        },
        "putWithMappedType": {
          "validation": {
            "body": {
              "properties": {
                "hello": {
                  "pattern": "hello_body",
                  "type": "string"
                },
                "world": {
                  "pattern": "world_body",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello",
                "world"
              ],
              "x-isDto": true
            },
            "query": null,
            "output": null,
            "params": null
          },
          "httpMethod": "PUT",
          "path": "put-with-mapped-type"
        },
        "getNestedQuery": {
          "validation": {
            "body": null,
            "query": {
              "properties": {
                "x": {
                  "type": "string"
                },
                "y": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "z": {}
              },
              "type": "object",
              "required": [
                "x",
                "y",
                "z"
              ],
              "x-isDto": true
            },
            "output": null,
            "params": null
          },
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "validation": {
            "body": null,
            "query": {
              "properties": {
                "hello": {
                  "pattern": "hello",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "output": {
              "properties": {
                "hello": {
                  "pattern": "hello",
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "hello"
              ],
              "x-isDto": true
            },
            "params": null
          },
          "path": "output-and-openapi",
          "httpMethod": "GET",
          "openapi": {
            "summary": "This is a summary",
            "parameters": [
              {
                "name": "hello",
                "in": "query",
                "required": true,
                "schema": {
                  "pattern": "hello",
                  "type": "string"
                }
              }
            ],
            "x-codeSamples": [
              {
                "label": "vovk-client",
                "lang": "typescript",
                "source": "import { MyRPC } from 'vovk-client';\n\nconst response = await MyRPC.outputWithOpenApi({\n    query: {\n        hello: \"string\"\n    },\n});\n    \nconsole.log(response);\n/* \n{\n    hello: \"string\"\n}\n*/\n    \n  "
              }
            ],
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "hello": {
                          "pattern": "hello",
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "hello"
                      ],
                      "x-isDto": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "OpenApiControllerRPC": {
      "controllerName": "OpenApiControllerRPC",
      "originalControllerName": "OpenApiController",
      "prefix": "openapi",
      "handlers": {
        "getSchema": {
          "openapi": {
            "summary": "Hello, World!",
            "x-codeSamples": [
              {
                "label": "vovk-client",
                "lang": "typescript",
                "source": "import { MyRPC } from 'vovk-client';\n\nconst response = await MyRPC.getSchema();\n    \n  "
              }
            ]
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    }
  }
}