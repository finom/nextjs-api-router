{
  "emitSchema": true,
  "segmentName": "foo/client",
  "controllers": {
    "ClientControllerRPC": {
      "controllerName": "ClientControllerRPC",
      "originalControllerName": "ClientController",
      "prefix": "client",
      "handlers": {
        "getHelloWorldResponseObject": {
          "httpMethod": "GET",
          "path": "get-hello-world-response-object"
        },
        "getHelloWorldObjectLiteral": {
          "httpMethod": "GET",
          "path": "get-hello-world-object-literal"
        },
        "getHelloWorldNextResponseObjectPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-next-response-object-promise"
        },
        "getHelloWorldRawResponseObjectPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-raw-response-object-promise"
        },
        "getHelloWorldObjectLiteralPromise": {
          "httpMethod": "GET",
          "path": "get-hello-world-object-literal-promise"
        },
        "getHelloWorldHeaders": {
          "httpMethod": "GET",
          "path": "get-hello-world-headers"
        },
        "getHelloWorldArray": {
          "httpMethod": "GET",
          "path": "get-hello-world-array"
        },
        "getHelloWorldAndEmptyGeneric": {
          "httpMethod": "GET",
          "path": "get-hello-world-and-empty-generic"
        },
        "getWithParams": {
          "path": "with-params/:hello",
          "httpMethod": "GET"
        },
        "postWithAll": {
          "path": "with-all/:hello",
          "httpMethod": "POST"
        },
        "postWithBodyAndQueryUsingReqVovk": {
          "path": "with-all-using-req-vovk",
          "httpMethod": "POST"
        },
        "getNestedQuery": {
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "postWithFormDataUsingReqVovk": {
          "path": "form-data",
          "httpMethod": "POST"
        },
        "getErrorResponse": {
          "path": "error",
          "httpMethod": "GET"
        }
      }
    },
    "StreamingControllerRPC": {
      "controllerName": "StreamingControllerRPC",
      "originalControllerName": "StreamingController",
      "prefix": "streaming",
      "handlers": {
        "postWithStreaming": {
          "httpMethod": "POST",
          "path": "post-with-streaming"
        },
        "postWithStreamingAndImmediateError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-immediate-error"
        },
        "postWithStreamingAndDelayedError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-error"
        },
        "postWithStreamingAndDelayedCustomError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-custom-error"
        },
        "postWithStreamingAndDelayedUnhandledError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-unhandled-error"
        }
      }
    },
    "StreamingGeneratorControllerRPC": {
      "controllerName": "StreamingGeneratorControllerRPC",
      "originalControllerName": "StreamingGeneratorController",
      "prefix": "streaming-generator",
      "handlers": {
        "getWithStreaming": {
          "httpMethod": "GET",
          "path": "get-with-streaming"
        },
        "postWithAsyncStreaming": {
          "httpMethod": "POST",
          "path": "post-with-async-streaming"
        },
        "postWithStreaming": {
          "httpMethod": "POST",
          "path": "post-with-streaming"
        },
        "postWithStreamingAndImmediateError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-immediate-error"
        },
        "postWithStreamingAndDelayedError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-error"
        },
        "postWithStreamingAndDelayedCustomError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-custom-error"
        },
        "postWithStreamingAndDelayedUnhandledError": {
          "httpMethod": "POST",
          "path": "post-with-streaming-and-delayed-unhandled-error"
        }
      }
    },
    "CostomSchemaControllerRPC": {
      "controllerName": "CostomSchemaControllerRPC",
      "originalControllerName": "CostomSchemaController",
      "prefix": "",
      "handlers": {
        "getWithCustomSchema": {
          "custom": {
            "hello": "world"
          },
          "httpMethod": "GET",
          "path": "get-with-custom-schema"
        }
      }
    },
    "WithZodClientControllerRPC": {
      "controllerName": "WithZodClientControllerRPC",
      "originalControllerName": "WithZodClientController",
      "prefix": "with-zod",
      "handlers": {
        "postWithBodyQueryAndParams": {
          "path": ":foo",
          "httpMethod": "POST"
        },
        "putWithBodyAndNullQuery": {
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "getNestedQuery": {
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "validation": {
            "body": null,
            "query": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": ["hello"],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            },
            "output": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": ["hello"],
              "additionalProperties": false,
              "$schema": "http://json-schema.org/draft-07/schema#"
            }
          },
          "openapi": {
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "hello": {
                          "type": "string"
                        }
                      },
                      "required": ["hello"],
                      "additionalProperties": false,
                      "$schema": "http://json-schema.org/draft-07/schema#"
                    }
                  }
                }
              }
            },
            "parameters": [
              {
                "name": "hello",
                "in": "query",
                "description": "",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "summary": "This is a summary"
          },
          "path": "output-and-openapi",
          "httpMethod": "GET"
        }
      }
    },
    "WithYupClientControllerRPC": {
      "controllerName": "WithYupClientControllerRPC",
      "originalControllerName": "WithYupClientController",
      "prefix": "with-yup",
      "handlers": {
        "postWithBodyAndQuery": {
          "httpMethod": "POST",
          "path": "post-with-body-and-query"
        },
        "putWithBodyAndNullQuery": {
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "getNestedQuery": {
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "path": "output-and-openapi",
          "httpMethod": "GET",
          "validation": {
            "query": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": ["hello"]
            },
            "output": {
              "type": "object",
              "default": {},
              "properties": {
                "hello": {
                  "type": "string"
                }
              },
              "required": ["hello"]
            }
          },
          "openapi": {
            "responses": {
              "200": {
                "description": "Success",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "default": {},
                      "properties": {
                        "hello": {
                          "type": "string"
                        }
                      },
                      "required": ["hello"]
                    }
                  }
                }
              }
            },
            "parameters": [
              {
                "name": "hello",
                "in": "query",
                "description": "",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "summary": "This is a summary"
          }
        }
      }
    },
    "WithDtoClientControllerRPC": {
      "controllerName": "WithDtoClientControllerRPC",
      "originalControllerName": "WithDtoClientController",
      "prefix": "with-dto",
      "handlers": {
        "postWithBodyQueryAndParams": {
          "path": "with-params/:param",
          "httpMethod": "POST"
        },
        "postWithBodyAndQueryTransformed": {
          "httpMethod": "POST",
          "path": "post-with-body-and-query-transformed"
        },
        "putWithBodyAndNullQuery": {
          "httpMethod": "PUT",
          "path": "put-with-body-and-null-query"
        },
        "putWithBodyOnly": {
          "httpMethod": "DELETE",
          "path": "put-with-body-only"
        },
        "getWithQueryAndNullBody": {
          "httpMethod": "GET",
          "path": "get-with-query-and-null-body"
        },
        "postWithBodyAndQueryWithReqVovk": {
          "httpMethod": "POST",
          "path": "post-with-body-and-query-with-req-vovk"
        },
        "getWithQueryArrayAndNullBody": {
          "httpMethod": "GET",
          "path": "get-with-query-array-and-null-body"
        },
        "putWithMappedType": {
          "httpMethod": "PUT",
          "path": "put-with-mapped-type"
        },
        "getNestedQuery": {
          "path": "nested-query",
          "httpMethod": "GET"
        },
        "outputWithOpenApi": {
          "path": "output-and-openapi",
          "httpMethod": "GET",
          "validation": {
            "body": null,
            "query": null,
            "output": null
          },
          "openapi": {
            "summary": "This is a summary"
          }
        }
      }
    },
    "OpenApiControllerRPC": {
      "controllerName": "OpenApiControllerRPC",
      "originalControllerName": "OpenApiController",
      "prefix": "openapi",
      "handlers": {
        "getSchema": {
          "openapi": {
            "summary": "Hello, World!"
          },
          "path": "",
          "httpMethod": "GET"
        }
      }
    }
  }
}
